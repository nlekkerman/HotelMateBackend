# Generated by Django 5.2.4 on 2025-10-23 17:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('entertainment', '0002_gamehighscore_player_name_alter_gamehighscore_user'),
        ('hotel', '0004_alter_hotel_logo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MemoryGameAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('games_played', 'Games Played'), ('high_score', 'High Score'), ('fast_time', 'Fast Time'), ('tournament', 'Tournament'), ('streak', 'Streak')], max_length=12)),
                ('required_value', models.IntegerField(help_text='Required value to unlock (games, score, time, etc.)')),
                ('difficulty', models.CharField(blank=True, choices=[('easy', 'Easy (4x4)'), ('intermediate', 'Intermediate (6x6)'), ('hard', 'Hard (8x8)')], help_text='Specific difficulty level (if applicable)', max_length=12)),
                ('icon_url', models.URLField(blank=True)),
                ('badge_color', models.CharField(default='#FFD700', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='MemoryGameStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_games', models.PositiveIntegerField(default=0)),
                ('games_won', models.PositiveIntegerField(default=0)),
                ('best_time_easy', models.PositiveIntegerField(blank=True, null=True)),
                ('best_time_intermediate', models.PositiveIntegerField(blank=True, null=True)),
                ('best_time_hard', models.PositiveIntegerField(blank=True, null=True)),
                ('best_score_easy', models.IntegerField(default=0)),
                ('best_score_intermediate', models.IntegerField(default=0)),
                ('best_score_hard', models.IntegerField(default=0)),
                ('total_score', models.IntegerField(default=0)),
                ('total_time_played', models.PositiveIntegerField(default=0)),
                ('average_moves_per_game', models.FloatField(default=0.0)),
                ('first_game_at', models.DateTimeField(blank=True, null=True)),
                ('last_game_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hotel', models.ForeignKey(blank=True, help_text="Primary hotel for this user's stats", null=True, on_delete=django.db.models.deletion.SET_NULL, to='hotel.hotel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='memory_game_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Memory Game Stats',
            },
        ),
        migrations.CreateModel(
            name='MemoryGameTournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy (4x4)'), ('intermediate', 'Intermediate (6x6)'), ('hard', 'Hard (8x8)')], default='easy', max_length=12)),
                ('max_participants', models.PositiveIntegerField(default=50, help_text='Maximum number of participants')),
                ('min_age', models.PositiveIntegerField(default=6, help_text='Minimum age for participation')),
                ('max_age', models.PositiveIntegerField(default=18, help_text='Maximum age for participation')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField(help_text='Last date for registration')),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=10)),
                ('qr_code_url', models.URLField(blank=True, null=True)),
                ('qr_generated_at', models.DateTimeField(blank=True, null=True)),
                ('first_prize', models.CharField(blank=True, max_length=200)),
                ('second_prize', models.CharField(blank=True, max_length=200)),
                ('third_prize', models.CharField(blank=True, max_length=200)),
                ('rules', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tournaments', to=settings.AUTH_USER_MODEL)),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_tournaments', to='hotel.hotel')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MemoryGameSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy (4x4)'), ('intermediate', 'Intermediate (6x6)'), ('hard', 'Hard (8x8)')], default='easy', max_length=12)),
                ('time_seconds', models.PositiveIntegerField(help_text='Time taken to complete the game in seconds')),
                ('moves_count', models.PositiveIntegerField(help_text='Number of moves/flips made')),
                ('score', models.IntegerField(default=0, help_text='Calculated score based on time, moves, and difficulty')),
                ('completed', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game_state', models.JSONField(blank=True, help_text='JSON data for saving/resuming incomplete games', null=True)),
                ('hotel', models.ForeignKey(blank=True, help_text='Hotel where the game was played', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hotel.hotel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_game_sessions', to=settings.AUTH_USER_MODEL)),
                ('tournament', models.ForeignKey(blank=True, help_text='Tournament this session belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='entertainment.memorygametournament')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TournamentParticipation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_name', models.CharField(help_text='Display name for tournament', max_length=100)),
                ('participant_age', models.PositiveIntegerField()),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('participated', 'Participated'), ('disqualified', 'Disqualified'), ('no_show', 'No Show')], default='registered', max_length=12)),
                ('best_score', models.IntegerField(default=0)),
                ('best_time', models.PositiveIntegerField(blank=True, null=True)),
                ('final_rank', models.PositiveIntegerField(blank=True, null=True)),
                ('games_played', models.PositiveIntegerField(default=0)),
                ('total_score', models.IntegerField(default=0)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='entertainment.memorygametournament')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-best_score', 'best_time'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entertainment.memorygameachievement')),
                ('session', models.ForeignKey(blank=True, help_text='Session that triggered this achievement', null=True, on_delete=django.db.models.deletion.SET_NULL, to='entertainment.memorygamesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory_game_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-unlocked_at'],
            },
        ),
        migrations.AddIndex(
            model_name='memorygametournament',
            index=models.Index(fields=['hotel', 'status'], name='entertainme_hotel_i_242ee7_idx'),
        ),
        migrations.AddIndex(
            model_name='memorygametournament',
            index=models.Index(fields=['start_date', 'end_date'], name='entertainme_start_d_f82302_idx'),
        ),
        migrations.AddIndex(
            model_name='memorygamesession',
            index=models.Index(fields=['user', 'difficulty'], name='entertainme_user_id_45dd87_idx'),
        ),
        migrations.AddIndex(
            model_name='memorygamesession',
            index=models.Index(fields=['hotel', 'created_at'], name='entertainme_hotel_i_1ea458_idx'),
        ),
        migrations.AddIndex(
            model_name='memorygamesession',
            index=models.Index(fields=['tournament', 'score'], name='entertainme_tournam_49caac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tournamentparticipation',
            unique_together={('tournament', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
    ]
